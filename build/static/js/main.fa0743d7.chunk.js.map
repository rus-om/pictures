{"version":3,"sources":["picturesAPI.ts","Pages/Pictures/picturesSlice.ts","hooks.ts","Components/MediaCard.tsx","App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","headers","picturesAPI","get","then","res","data","fetchPictures","createAsyncThunk","arg","thunkAPI","a","response","pictures","map","i","idx","id","pictureLink","src","title","isLike","dispatch","init","console","log","filterPicturesFromRoot","root","filter","picture","slice","createSlice","name","initialState","isLikeFilterActive","reducers","state","action","payload","setLike","cardElement","deleteCard","setFilterPosition","filterPosition","actions","picturesReducer","reducer","useAppSelector","useSelector","MediaCard","props","useDispatch","className","Card","CardMedia","component","height","width","image","CardContent","Typography","variant","color","CardActions","Tooltip","IconButton","onClick","App","useEffect","Switch","checked","onChange","e","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","ReactDOM","render","document","getElementById"],"mappings":"8OAEMA,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gCACTC,iBAAiB,EACjBC,QAAS,CACL,eAAgB,sBAgBXC,EAAc,WAEnB,OAAON,EAASO,IAAT,uBAELC,MAAK,SAACC,GAAD,OAAOA,EAAIC,KAAK,GAAG,qBCHrBC,EAAgBC,YAOvB,yBAPuC,uCAOb,WAAOC,EAAKC,GAAZ,iBAAAC,EAAA,+EAEDT,IAFC,OAElBU,EAFkB,OAGpBC,EAAWD,EAASE,KAAI,SAACC,EAAGC,GAC5B,MAAO,CAACC,GAAID,EAAKE,YAAaH,EAAEI,IAAKC,MAAOL,EAAEK,MAAOC,QAAQ,MACjEX,EAASY,SAASC,EAAK,CAAEV,cALD,gDAOxBW,QAAQC,IAAR,MAPwB,yDAPa,yDAkBvCC,EAAyB,SAACC,EAA2BN,GAA5B,OAAgDM,EAAKC,QAAO,SAACC,GAAD,OAAYA,EAAQR,SAAWA,MAEpHS,EAAQC,YAAY,CACtBC,KAAM,WACNC,aA5BmC,CACnCN,KAAM,GACNd,SAAU,GACVqB,oBAAoB,GA0BpBC,SAAU,CACNZ,KAAM,SAACa,EAAOC,GACVD,EAAMT,KAAOU,EAAOC,QAAQzB,SAC5BuB,EAAMvB,SAAWwB,EAAOC,QAAQzB,UAEpC0B,QAAS,SAACH,EAAOC,GACbD,EAAMT,KAAOS,EAAMT,KAAKb,KAAI,SAACe,GACzB,OAAIA,EAAQZ,KAAOoB,EAAOC,QAAQE,YAAYvB,GACnC,2BAAIY,GAAX,IAAoBR,OAAQgB,EAAOC,QAAQE,YAAYnB,SAEpDQ,KAEXO,EAAMvB,SAAWa,EAAuBU,EAAMT,KAAMS,EAAMF,qBAE9DO,WAAY,SAACL,EAAOC,GAChBD,EAAMT,KAAOS,EAAMT,KAAKC,QAAO,SAACC,GAAD,OAAWA,EAAQZ,KAAOoB,EAAOC,QAAQrB,MACxEmB,EAAMvB,SAAWa,EAAuBU,EAAMT,KAAMS,EAAMF,qBAE9DQ,kBAAmB,SAACN,EAAOC,GACvBD,EAAMF,mBAAqBG,EAAOC,QAAQK,eAC1CP,EAAMvB,SAAWa,EAAuBU,EAAMT,KAAMU,EAAOC,QAAQK,oBAKxE,EAKHb,EAAMc,QAJNrB,EADG,EACHA,KACAgB,EAFG,EAEHA,QACAE,EAHG,EAGHA,WACAC,EAJG,EAIHA,kBAGSG,EAAkBf,EAAMgB,Q,QC1ExBC,EAAkDC,I,iHCQxD,SAASC,EAAUC,GACtB,IAAM5B,EAAW6B,cAUjB,OACI,qBAAKC,UAAU,OAAf,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACIC,UAAU,MACVC,OAAO,MACPC,MAAM,MACNC,MAAOR,EAAMhC,cAEjB,cAACyC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,iBAAlC,SACKZ,EAAM9B,UAGf,eAAC2C,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAS5C,MAAQ8B,EAAM7B,OAAS,sEAAiB,mDAAjD,SACI,cAAC4C,EAAA,EAAD,CAAY,aAAW,mBAAmBC,QAAS,kBAxBjDjD,EAwBiEiC,EAAMjC,GAxB3DI,GAwBgE6B,EAAM7B,YAvBpGC,EAASiB,EAAQ,CAACC,YAAa,CAACvB,KAAII,aADpB,IAAEJ,EAAYI,GAwBd,SACI,cAAC,IAAD,CAAcyC,MAAOZ,EAAM7B,OAAS,QAAU,gBAGtD,cAAC2C,EAAA,EAAD,CAAS5C,MAAM,6CAAf,SACI,cAAC6C,EAAA,EAAD,CAAY,aAAW,mBAAmBC,QAAS,kBAzB1CjD,EAyBkEiC,EAAMjC,QAxBjGK,EAASmB,EAAW,CAACxB,QADG,IAACA,GAyBT,SACI,cAAC,IAAD,CAAY6C,MAAM,wB,oBCpCvC,SAASK,IACZ,IAAM7C,EAAW6B,cACjB,EAAuCJ,GAAe,SAACX,GAAD,OAAWA,EAAMS,mBAAhEhC,EAAP,EAAOA,SAAUqB,EAAjB,EAAiBA,mBAEjBkC,qBAAU,WACN9C,EAASf,EAAc,OACxB,CAACe,IAMJ,OACI,sBAAK8B,UAAU,MAAf,UACI,sBAAKA,UAAU,SAAf,UACI,cAACiB,EAAA,EAAD,CAAQC,QAASpC,EAAoBqC,SAPrB,SAACC,EAAkCF,GAC3DhD,EAASoB,EAAkB,CAACC,eAAgB2B,QAOnC,cAAC,IAAD,CAAcR,MAAO5B,EAAqB,QAAU,cAEzD,qBAAKkB,UAAU,QAAf,SACKvC,EAASC,KAAI,SAACe,GAAD,OAAa,cAAC,EAAD,CAA4BZ,GAAIY,EAAQZ,GAAIC,YAAaW,EAAQX,YACtDE,MAAOS,EAAQT,MAAOC,OAAQQ,EAAQR,QADjCQ,EAAQZ,YC1BnE,IAYewD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBvE,MAAK,YAAkD,IAA/CwE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCNRO,EAAcC,YAAgB,CAChCrC,oBAGSsC,EAAQC,YAAe,CAChCtC,QAASmC,ICAbI,IAASC,OACL,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJI,SAASC,eAAe,SAG5Bf,K","file":"static/js/main.fa0743d7.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://www.fishwatch.gov/api',\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\nexport type PicturesResponseType = [\r\n    {\r\n        \"Image Gallery\": [\r\n            {\r\n                \"src\": string,\r\n                \"alt\": string,\r\n                \"title\": string\r\n            },\r\n        ],\r\n    }\r\n]\r\n\r\nexport const picturesAPI = {\r\n    getPictures() {\r\n        return instance.get<PicturesResponseType>(\r\n            `species/red-snapper`\r\n        ).then((res)=>res.data[0][\"Image Gallery\"])\r\n    },\r\n};\r\n","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {AppDispatch, RootState} from '../../store'\r\nimport {picturesAPI} from \"../../picturesAPI\";\r\n\r\nexport type PicturesType = {\r\n    id: number,\r\n    pictureLink: string,\r\n    title: string,\r\n    isLike: boolean\r\n}\r\n\r\ntype InitialStateType = {\r\n    root: Array<PicturesType>\r\n    pictures: Array<PicturesType>\r\n    isLikeFilterActive: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    root: [],\r\n    pictures: [],\r\n    isLikeFilterActive: false\r\n}\r\n\r\nexport const fetchPictures = createAsyncThunk<\r\n    any,\r\n    any,\r\n    {\r\n        dispatch: AppDispatch\r\n        state: RootState\r\n    }\r\n    >('pictures/fetchPictures', async (arg, thunkAPI) => {\r\n    try {\r\n        const response = await picturesAPI.getPictures()\r\n        let pictures = response.map((i, idx)=>{\r\n            return {id: idx, pictureLink: i.src, title: i.title, isLike: false}})\r\n        thunkAPI.dispatch(init({ pictures }))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n})\r\n\r\nconst filterPicturesFromRoot = (root: Array<PicturesType>, isLike: boolean) => root.filter((picture)=> picture.isLike || !isLike)\r\n\r\nconst slice = createSlice({\r\n    name: 'pictures',\r\n    initialState: initialState,\r\n    reducers: {\r\n        init: (state, action: PayloadAction<{ pictures: Array<PicturesType> }>) => {\r\n            state.root = action.payload.pictures\r\n            state.pictures = action.payload.pictures\r\n        },\r\n        setLike: (state, action: PayloadAction<{ cardElement: { id: number, isLike: boolean} }>) => {\r\n            state.root = state.root.map((picture)=>{\r\n                if (picture.id === action.payload.cardElement.id) {\r\n                    return {...picture, isLike: action.payload.cardElement.isLike}\r\n                }\r\n                return picture\r\n            })\r\n            state.pictures = filterPicturesFromRoot(state.root, state.isLikeFilterActive)\r\n        },\r\n        deleteCard: (state, action: PayloadAction<{ id: number }>) => {\r\n            state.root = state.root.filter((picture)=>picture.id !== action.payload.id)\r\n            state.pictures = filterPicturesFromRoot(state.root, state.isLikeFilterActive)\r\n        },\r\n        setFilterPosition: (state, action: PayloadAction<{ filterPosition: boolean }>) => {\r\n            state.isLikeFilterActive = action.payload.filterPosition\r\n            state.pictures = filterPicturesFromRoot(state.root, action.payload.filterPosition)\r\n        },\r\n    },\r\n})\r\n\r\nexport const {\r\n    init,\r\n    setLike,\r\n    deleteCard,\r\n    setFilterPosition,\r\n} = slice.actions\r\n\r\nexport const picturesReducer = slice.reducer\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import * as React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport {deleteCard, PicturesType, setLike} from \"../Pages/Pictures/picturesSlice\";\r\nimport {IconButton, Tooltip, Typography} from \"@mui/material\";\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport './MediaCard.css'\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport function MediaCard(props: PicturesType) {\r\n    const dispatch = useDispatch()\r\n\r\n    const likeHandler = ( id: number, isLike: boolean ) => {\r\n        dispatch(setLike({cardElement: {id, isLike}}))\r\n    }\r\n\r\n    const deleteButtonHandler = (id: number) => {\r\n        dispatch(deleteCard({id}))\r\n    }\r\n\r\n    return (\r\n        <div className=\"Card\">\r\n            <Card>\r\n                <CardMedia\r\n                    component=\"img\"\r\n                    height=\"140\"\r\n                    width=\"200\"\r\n                    image={props.pictureLink}\r\n                />\r\n                <CardContent>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {props.title}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Tooltip title={ props.isLike ? \"Забрать лайк\" : \"Лайкнуть\" }>\r\n                        <IconButton aria-label=\"add to favorites\" onClick={()=>likeHandler(props.id, !props.isLike)}>\r\n                            <FavoriteIcon color={props.isLike ? 'error' : 'inherit'}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Удалить\">\r\n                        <IconButton aria-label=\"add to favorites\" onClick={()=>deleteButtonHandler(props.id)}>\r\n                            <DeleteIcon color='inherit'/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </CardActions>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n","import React, {ChangeEvent, useEffect} from 'react';\nimport {fetchPictures, setFilterPosition} from './Pages/Pictures/picturesSlice';\nimport {useAppSelector} from \"./hooks\";\nimport {MediaCard} from \"./Components/MediaCard\";\nimport {useDispatch} from \"react-redux\";\nimport './App.css'\nimport {Switch} from \"@mui/material\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\n\nexport function App() {\n    const dispatch = useDispatch()\n    const {pictures, isLikeFilterActive} = useAppSelector((state) => state.picturesReducer)\n\n    useEffect(() => {\n        dispatch(fetchPictures({}))\n    }, [dispatch])\n\n    const switchFilterHandler = (e: ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        dispatch(setFilterPosition({filterPosition: checked}))\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"Switch\">\n                <Switch checked={isLikeFilterActive} onChange={switchFilterHandler}/>\n                 <FavoriteIcon color={isLikeFilterActive ? \"error\" : \"action\"}/>\n            </div>\n            <div className=\"Cards\">\n                {pictures.map((picture) => <MediaCard key={picture.id} id={picture.id} pictureLink={picture.pictureLink}\n                                                      title={picture.title} isLike={picture.isLike}/>)}\n            </div>\n        </div>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore, combineReducers, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport {picturesReducer} from \"./Pages/Pictures/picturesSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n    picturesReducer,\r\n});\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./store\";\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}